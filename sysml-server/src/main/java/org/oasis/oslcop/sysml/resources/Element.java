// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package org.oasis.oslcop.sysml.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.resources.SysmlDomainConstants;
import org.eclipse.lyo.oslc.domains.am.Resource;

import org.oasis.oslcop.sysml.resources.SysmlDomainConstants;
import org.eclipse.lyo.oslc.domains.Person;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.resources.Relationship;

// Start of user code imports
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.eclipse.lyo.oslc.domains.am.Resource;
import org.oasis.oslcop.sysml.ServiceProviderInfo;
import org.oasis.oslcop.sysml.servlet.ServiceProviderCatalogSingleton;
import org.oasis.oslcop.sysml.SysmlServerResourcesFactory;
import javax.xml.namespace.QName;
import java.text.DateFormat;
import java.text.ParseException;
import javax.servlet.http.HttpServletRequest;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.ELEMENT_NAMESPACE)
@OslcName(SysmlDomainConstants.ELEMENT_LOCALNAME)
@OslcResourceShape(title = "Element Resource Shape", describes = SysmlDomainConstants.ELEMENT_TYPE)
public class Element
    extends Resource
    implements IElement
{
    // Start of user code attributeAnnotation:ownedRelationship
    // End of user code
    private Set<Link> ownedRelationship = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
	private static DateFormat createDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
	private static DateFormat updateDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");

    public Element(final HttpServletRequest httpServletRequest, final ServiceProviderInfo info, final String id, JsonElement elementE) throws URISyntaxException {
		super();

		// Set some inherited oslc_am:Resource properties that need to be set by the subclass
		setIdentifier(id);
		// SysML resources need to be marked with rdf:types that the CLM apps can link to
		// All cross-server links are fixed and hard-coded, so we have to do this to create any links
		// This is also influenced by where the links can be stored - either directly or as backlinks
		getTypes().add(new URI("http://open-services.net/ns/rm#Requirement"));		
		getTypes().add(new URI(Oslc_amDomainConstants.RESOURCE_TYPE));

		// Note that there must be a service provider since we are creating an instance of an resource
		// Therefore there will be no need to refresh the catalog
		ServiceProvider serviceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, info.serviceProviderId);
		Set<Link> serviceProviders = new HashSet<Link>();
		serviceProviders.add(new Link(serviceProvider.getAbout()));
		setServiceProvider(serviceProviders);
		setAbout(SysmlServerResourcesFactory.constructLinkForElement(info.serviceProviderId, id).getValue());
		Set<Link> shapes = new HashSet<Link>();
		try {
			shapes.add(new Link(createResourceShape().getAbout()));
			setInstanceShape(shapes);
		} catch (OslcCoreApplicationException e) {
		}

		JsonObject elementO = elementE.getAsJsonObject();
		JsonElement element = elementO.get("name");
		if (element != null && !element.isJsonNull()) this.setTitle(element.getAsString());
		element = elementO.get("name");
		if (element != null && !element.isJsonNull()) this.setShortTitle(element.getAsString());

		element = elementO.get("@type");
		if (element != null && !element.isJsonNull()) this.getType().add(element.getAsString());

		element = elementO.get("description");
		if (element != null && !element.isJsonNull()) this.setDescription(element.getAsString());
		
		try {
			element = elementO.get("createdDateTime");
			if (element != null && !element.isJsonNull()) this.setCreated(createDateFormat.parse(element.getAsString()));
			element = elementO.get("updatedDateTime");
			if (element != null && !element.isJsonNull()) this.setModified(updateDateFormat.parse(element.getAsString()));
		} catch (ParseException exc) {
			// the updated format is the same as the created format when the device type is first deployed
			try {
				if (this.getModified() == null) this.setModified(createDateFormat.parse(element.getAsString()));
			} catch (ParseException e) {				
			}
		}
		
		// Put all the rest of the Element proprties into extended attributes:
		Map<QName, Object> extendedProperties = new HashMap<QName, Object>();
		Set<Map.Entry<String, JsonElement>> entries = elementE.getAsJsonObject().entrySet();
		for (Map.Entry<String, JsonElement> entry: entries) {
			String key = entry.getKey();
			Object value = entry.getValue();
			extendedProperties.put(new QName("http://schema.org/sysml",key, "sysml"), value);
		}
		this.setExtendedProperties(extendedProperties);
		
    }
    
    public JsonElement toJson() {
		JsonObject json = new JsonObject();
		json.addProperty("name", getTitle());
		json.addProperty("id", getIdentifier());
		json.addProperty("identifier", getIdentifier());

		return json;
    }
    // End of user code
    public Element()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Element(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.ELEMENT_PATH,
        Element.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Element Resource} - update Element.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        // Provide a more useful string representation
        result = getTitle();
        if (result == null) result = getIdentifier();
        result += "::"+getType();
        // End of user code
    
        return result;
    }
    
    public void addOwnedRelationship(final Link ownedRelationship)
    {
        this.ownedRelationship.add(ownedRelationship);
    }
    
    
    // Start of user code getterAnnotation:ownedRelationship
    // End of user code
    @OslcName("ownedRelationship")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedRelationship")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.RELATIONSHIP_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedRelationship()
    {
        // Start of user code getterInit:ownedRelationship
        // End of user code
        return ownedRelationship;
    }
    
    
    // Start of user code setterAnnotation:ownedRelationship
    // End of user code
    public void setOwnedRelationship(final Set<Link> ownedRelationship )
    {
        // Start of user code setterInit:ownedRelationship
        // End of user code
        this.ownedRelationship.clear();
        if (ownedRelationship != null)
        {
            this.ownedRelationship.addAll(ownedRelationship);
        }
    
        // Start of user code setterFinalize:ownedRelationship
        // End of user code
    }
    
    
}
